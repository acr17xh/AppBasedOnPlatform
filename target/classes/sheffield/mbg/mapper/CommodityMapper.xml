<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="sheffield.mbg.dao.CommodityMapper">
	<resultMap id="BaseResultMap" type="sheffield.mbg.pojo.Commodity">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Thu Dec 14 
			14:37:53 GMT 2017. -->
		<id column="commodityId" jdbcType="BIGINT" property="commodityid" />
		<result column="commodityName" jdbcType="VARCHAR" property="commodityname" />
		<result column="commodityDate" jdbcType="VARCHAR" property="commoditydate" />
		<result column="commodityPrice" jdbcType="DOUBLE" property="commodityprice" />
		<result column="commodityQuantity" jdbcType="DOUBLE" property="commodityquantity" />
		<result column="commodityOwnerId" jdbcType="BIGINT" property="commodityownerid" />
		<result column="commodityCategory" jdbcType="VARCHAR" property="commoditycategory" />
		<result column="commoditySales" jdbcType="DOUBLE" property="commoditysales" />
		<result column="commodityLocation" jdbcType="VARCHAR" property="commoditylocation" />
		<result column="version" jdbcType="BIGINT" property="version" />
		<result column="commodityDescription" jdbcType="LONGVARCHAR"
			property="commoditydescription" />
	</resultMap>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Thu Dec 14 
			14:37:53 GMT 2017. -->
		delete from commodity
		where commodityId =
		#{commodityid,jdbcType=BIGINT}
	</delete>
	<insert id="insert" parameterType="sheffield.mbg.pojo.Commodity"
		useGeneratedKeys="true" keyProperty="commodityid">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Thu Dec 14 
			14:37:53 GMT 2017. -->
		insert into commodity (commodityId, commodityName, commodityDate,
		commodityPrice, commodityQuantity, commodityOwnerId,
		commodityCategory, commoditySales, commodityLocation,
		version,
		commodityDescription)
		values (#{commodityid,jdbcType=BIGINT},
		#{commodityname,jdbcType=VARCHAR},
		#{commoditydate,jdbcType=VARCHAR},
		#{commodityprice,jdbcType=DOUBLE},
		#{commodityquantity,jdbcType=DOUBLE},
		#{commodityownerid,jdbcType=BIGINT},
		#{commoditycategory,jdbcType=VARCHAR},
		#{commoditysales,jdbcType=DOUBLE},
		#{commoditylocation,jdbcType=VARCHAR},
		#{version,jdbcType=BIGINT},
		#{commoditydescription,jdbcType=LONGVARCHAR})
	</insert>
	<update id="updateByPrimaryKey" parameterType="sheffield.mbg.pojo.Commodity">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Thu Dec 14 
			14:37:53 GMT 2017. -->
		update commodity
		set commodityName = #{commodityname,jdbcType=VARCHAR},
		commodityDate = #{commoditydate,jdbcType=VARCHAR},
		commodityPrice =
		#{commodityprice,jdbcType=DOUBLE},
		commodityQuantity =
		#{commodityquantity,jdbcType=DOUBLE},
		commodityOwnerId =
		#{commodityownerid,jdbcType=BIGINT},
		commodityCategory =
		#{commoditycategory,jdbcType=VARCHAR},
		commoditySales =
		#{commoditysales,jdbcType=DOUBLE},
		commodityLocation =
		#{commoditylocation,jdbcType=VARCHAR},
		version =
		#{version,jdbcType=BIGINT},
		commodityDescription =
		#{commoditydescription,jdbcType=LONGVARCHAR}
		where commodityId =
		#{commodityid,jdbcType=BIGINT}
	</update>

	<!-- <update id="updateForVersionByPrimaryKeyAndVersion"> update commodity 
		set version = version+1, commodityQuantity = #{commodityquantity,jdbcType=DOUBLE} 
		where commodityId = #{commodityid,jdbcType=BIGINT} and version=#{version,jdbcType=BIGINT} 
		</update> -->

	<select id="selectByPrimaryKey" parameterType="java.lang.Long"
		resultMap="BaseResultMap">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Thu Dec 14 
			14:37:53 GMT 2017. -->
		select commodityId, commodityName, commodityDate, commodityPrice,
		commodityQuantity,
		commodityOwnerId, commodityCategory, commoditySales,
		commodityLocation, version,
		commodityDescription
		from commodity
		where
		commodityId = #{commodityid,jdbcType=BIGINT}
	</select>

	<select id="selectByCommodityName" parameterType="java.lang.String"
		resultMap="BaseResultMap">

		select commodityId, commodityName, commodityDate,
		commodityPrice,
		commodityQuantity,
		commodityOwnerId, commodityCategory,
		commoditySales,
		commodityLocation, version,
		commodityDescription
		from
		commodity
		where
		commodityName = #{commodityname,jdbcType=VARCHAR}
	</select>


	<select id="selectAll" resultMap="BaseResultMap">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Thu Dec 14 
			14:37:53 GMT 2017. -->
		select commodityId, commodityName, commodityDate, commodityPrice,
		commodityQuantity,
		commodityOwnerId, commodityCategory, commoditySales,
		commodityLocation, version,
		commodityDescription
		from commodity
	</select>

	<select id="selectAllBySales" resultMap="BaseResultMap">
		SELECT
		*
		FROM
		ssmrdb.`commodity` AS a
		INNER JOIN
		(SELECT
		c.commodityId
		FROM
		ssmrdb.`commodity` AS c
		INNER JOIN
		(SELECT
		*
		FROM
		ssmrdb.`commodity`) AS d
		ON d.commodityId = c.commodityId
		ORDER BY d.commoditySales DESC
		LIMIT
		#{limitoffset,jdbcType=INTEGER},#{limitsize,jdbcType=INTEGER}) AS b
		ON
		a.`commodityId` = b.commodityId
	</select>


	<select id="selectByOwnerId" resultMap="BaseResultMap"
		parameterType="java.lang.Long">

		select commodityId, commodityName, commodityDate,
		commodityPrice,
		commodityQuantity,
		commodityOwnerId, commodityCategory,
		commoditySales,
		commodityLocation, version,
		commodityDescription
		from
		commodity where
		commodityOwnerId=#{commodityownerid,jdbcType=BIGINT}
	</select>

	<!-- <select id="selectByUsingFullTextOrderBySales" resultMap="BaseResultMap"> 
		SELECT * FROM ssmrdb.`commodity` WHERE MATCH ( commodity.`commodityName`, 
		commodity.`commodityDescription` ) AGAINST (#{searchcontent,jdbcType=LONGVARCHAR}) 
		ORDER BY commodity.`commoditySales` DESC </select> -->


	<select id="selectByUsingFullTextOrderBySales" resultMap="BaseResultMap">
		SELECT
		*
		FROM
		ssmrdb.`commodity` AS a
		INNER JOIN
		(SELECT
		c.commodityId
		FROM
		ssmrdb.`commodity` AS c
		INNER JOIN
		(SELECT
		*
		FROM
		ssmrdb.`commodity`
		WHERE
		MATCH (
		commodity.`commodityName`,
		commodity.`commodityDescription`,
		commodity.`commodityCategory`
		)
		AGAINST
		(#{searchcontent,jdbcType=LONGVARCHAR})) AS d
		ON d.commodityId
		=
		c.commodityId
		ORDER BY d.commoditySales DESC
		LIMIT
		#{limitoffset,jdbcType=INTEGER},#{limitsize,jdbcType=INTEGER} ) AS b
		ON a.`commodityId` = b.commodityId
	</select>

	<select id="selectByUsingFullTextOrderByDate" resultMap="BaseResultMap">
		SELECT
		*
		FROM
		ssmrdb.`commodity` AS a
		INNER JOIN
		(SELECT
		c.commodityId
		FROM
		ssmrdb.`commodity` AS c
		INNER JOIN
		(SELECT
		*
		FROM
		ssmrdb.`commodity`
		WHERE
		MATCH (
		commodity.`commodityName`,
		commodity.`commodityDescription`,
		commodity.`commodityCategory`
		)
		AGAINST
		(#{searchcontent,jdbcType=LONGVARCHAR})) AS d
		ON d.commodityId
		=
		c.commodityId
		ORDER BY d.commodityDate DESC
		LIMIT
		#{limitoffset,jdbcType=INTEGER},#{limitsize,jdbcType=INTEGER} ) AS b
		ON a.`commodityId` = b.commodityId
	</select>

	<select id="selectByUsingFullTextOrderByPriceDESC" resultMap="BaseResultMap">
		SELECT
		*
		FROM
		ssmrdb.`commodity` AS a
		INNER JOIN
		(SELECT
		c.commodityId
		FROM
		ssmrdb.`commodity` AS c
		INNER JOIN
		(SELECT
		*
		FROM
		ssmrdb.`commodity`
		WHERE
		MATCH (
		commodity.`commodityName`,
		commodity.`commodityDescription`,
		commodity.`commodityCategory`
		)
		AGAINST
		(#{searchcontent,jdbcType=LONGVARCHAR})) AS d
		ON d.commodityId
		=
		c.commodityId
		ORDER BY d.commodityPrice DESC
		LIMIT
		#{limitoffset,jdbcType=INTEGER},#{limitsize,jdbcType=INTEGER} ) AS b
		ON a.`commodityId` = b.commodityId
	</select>

	<select id="selectByUsingFullTextOrderByPriceASC" resultMap="BaseResultMap">
		SELECT
		*
		FROM
		ssmrdb.`commodity` AS a
		INNER JOIN
		(SELECT
		c.commodityId
		FROM
		ssmrdb.`commodity` AS c
		INNER JOIN
		(SELECT
		*
		FROM
		ssmrdb.`commodity`
		WHERE
		MATCH (
		commodity.`commodityName`,
		commodity.`commodityDescription`,
		commodity.`commodityCategory`
		)
		AGAINST
		(#{searchcontent,jdbcType=LONGVARCHAR})) AS d
		ON d.commodityId
		=
		c.commodityId
		ORDER BY d.commodityPrice ASC
		LIMIT
		#{limitoffset,jdbcType=INTEGER},#{limitsize,jdbcType=INTEGER} ) AS b
		ON a.`commodityId` = b.commodityId
	</select>

	<select id="selectRateBySearch" resultType="Double">
		SELECT
		AVG(rate) AS
		CommodityRate
		FROM
		review
		GROUP BY commodityId
		HAVING commodityId =
		#{commodityid,jdbcType=BIGINT}
	</select>

	<select id="countBySearch" resultType="INTEGER">
		SELECT
		COUNT(*)
		FROM
		(SELECT
		c.`commodityId`
		FROM
		ssmrdb.`commodity` AS c
		INNER JOIN
		(SELECT
		*
		FROM
		ssmrdb.`commodity`
		WHERE MATCH (
		commodity.`commodityName`,
		commodity.`commodityDescription`,
		commodity.`commodityCategory`
		)
		AGAINST
		(#{searchcontent,jdbcType=LONGVARCHAR})) AS d
		ON d.commodityId =
		c.commodityId) AS numberOfRecords
	</select>

	<select id="countAll" resultType="INTEGER">
		SELECT
		COUNT(*)
		FROM
		commodity AS
		numberOfRecords
	</select>

	<select id="selectForHomePage" resultMap="BaseResultMap">
		SELECT
		*
		FROM
		commodity AS
		a
		ORDER BY a.commoditySales DESC
		LIMIT
		#{limitoffset,jdbcType=INTEGER},#{limitsize,jdbcType=INTEGER}
	</select>


	<select id="searchByPriceRange" resultMap="BaseResultMap">
		SELECT
		*
		FROM
		ssmrdb.`commodity` AS a
		INNER JOIN
		(SELECT
		c.commodityId
		FROM
		ssmrdb.`commodity` AS c
		INNER JOIN
		(SELECT
		*
		FROM
		ssmrdb.`commodity`
		WHERE
		MATCH (
		commodity.`commodityName`,
		commodity.`commodityDescription`,
		commodity.`commodityCategory`
		) AGAINST
		(#{searchcontent,jdbcType=LONGVARCHAR})) AS d
		ON d.commodityId =
		c.commodityId) AS b
		ON b.commodityId = a.commodityId
		WHERE
		a.`commodityPrice` between #{fromprice,jdbcType=DOUBLE}
		AND
		#{toprice,jdbcType=DOUBLE}
		ORDER BY a.`commodityPrice` ASC
		LIMIT
		#{limitoffset,jdbcType=INTEGER},#{limitsize,jdbcType=INTEGER}
	</select>


</mapper>